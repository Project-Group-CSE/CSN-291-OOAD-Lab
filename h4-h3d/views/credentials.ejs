
    <!DOCTYPE html>
    <html lang="en">

    <head>
     
      <meta charset="UTF-8" />
      <meta name="viewport" content="width=device-width, initial-scale=1.0" />

      <style>
        .container1 {
          margin: 5% 3%;
        }

        @media (min-width: 48em) {
          .container1 {
            margin: 2%;
          }
        }

        @media (min-width: 75em) {
          .container1 {
            margin: 2em auto;
            max-width: 75em;
          }
        }

        .responsive-table1 {
          width: 100%;
          margin-bottom: 1.5em;
          border-spacing: 0;
        }

        @media (min-width: 48em) {
          .responsive-table1 {
            font-size: 0.9em;
          }
        }

        @media (min-width: 62em) {
          .responsive-table1 {
            font-size: 1em;
          }
        }

        .responsive-table1 thead {
          position: absolute;
          clip: rect(1px 1px 1px 1px);
          /* IE6, IE7 */
          padding: 0;
          border: 0;
          height: 1px;
          width: 1px;
          overflow: hidden;
          z-index: -1;
        }

        @media (min-width: 48em) {
          .responsive-table1 thead {
            position: relative;
            clip: auto;
            height: auto;
            width: auto;
            overflow: auto;
          }
        }

        .responsive-table1 thead th {
          background-color: #3EB2FD;
          background-image: linear-gradient(1deg, #4F58FD, #149BF3 99%);
          background-size: calc(100% + 20px) calc(100% + 20px);
          border: 1px solid rgb(5, 55, 96);
          font-weight: normal;
          text-align: center;
          color: white;
        }

        .responsive-table1 thead th:first-of-type {
          text-align: left;
        }

        .responsive-table1 tbody,
        .responsive-table1 tr,
        .responsive-table1 th,
        .responsive-table1 td {
          display: block;
          padding: 0;
          text-align: left;
          white-space: normal;
        }

        @media (min-width: 48em) {
          .responsive-table1 tr {
            display: table-row;
          }
        }

        .responsive-table1 th,
        .responsive-table1 td {
          padding: 0.5em;
          vertical-align: middle;
        }

        @media (min-width: 30em) {

          .responsive-table1 th,
          .responsive-table1 td {
            padding: 0.75em 0.5em;
          }
        }

        @media (min-width: 48em) {

          .responsive-table1 th,
          .responsive-table1 td {
            display: table-cell;
            padding: 0.5em;
          }
        }

        @media (min-width: 62em) {

          .responsive-table1 th,
          .responsive-table1 td {
            padding: 0.75em 0.5em;
          }
        }

        @media (min-width: 75em) {

          .responsive-table1 th,
          .responsive-table1 td {
            padding: 0.75em;
          }
        }

        .responsive-table1 caption {
          margin-bottom: 1em;
          font-size: 1em;
          font-weight: bold;
          text-align: center;
        }

        @media (min-width: 48em) {
          .responsive-table1 caption {
            font-size: 1.5em;
          }
        }

        .responsive-table1 tfoot {
          font-size: 0.8em;
          font-style: italic;
        }

        @media (min-width: 62em) {
          .responsive-table1 tfoot {
            font-size: 0.9em;
          }
        }

        @media (min-width: 48em) {
          .responsive-table1 tbody {
            display: table-row-group;
          }
        }

        .responsive-table1 tbody tr {
          margin-bottom: 1em;
        }

        @media (min-width: 48em) {
          .responsive-table1 tbody tr {
            display: table-row;
            border-width: 1px;
          }
        }

        .responsive-table1 tbody tr:last-of-type {
          margin-bottom: 0;
        }

        @media (min-width: 48em) {
          .responsive-table1 tbody tr:nth-of-type(even) {
            background-color: rgba(0, 0, 0, 0.12);
          }
        }

        .responsive-table1 tbody th[scope="row"] {
          background-color: #26890d;
          color: white;
        }

        @media (min-width: 30em) {
          .responsive-table1 tbody th[scope="row"] {
            border-left: 1px solid #86bc25;
            border-bottom: 1px solid #86bc25;
          }
        }

        @media (min-width: 48em) {
          .responsive-table1 tbody th[scope="row"] {
            background-color: transparent;
            color: #000001;
            text-align: left;
          }
        }

        .responsive-table1 tbody td {
          text-align: right;
        }

        @media (min-width: 48em) {
          .responsive-table1 tbody td {
            border-left: 1px solid #86bc25;
            border-bottom: 1px solid #86bc25;
            text-align: center;
          }
        }

        @media (min-width: 48em) {
          .responsive-table1 tbody td:last-of-type {
            border-right: 1px solid #86bc25;
          }
        }

        .responsive-table1 tbody td[data-type="currency"] {
          text-align: right;
        }

        .responsive-table1 tbody td[data-title]:before {
          content: attr(data-title);
          float: left;
          font-size: 0.8em;
          color: rgba(0, 0, 0, 0.54);
        }

        @media (min-width: 30em) {
          .responsive-table1 tbody td[data-title]:before {
            font-size: 0.9em;
          }
        }

        @media (min-width: 48em) {
          .responsive-table1 tbody td[data-title]:before {
            content: none;
          }
        }

        .container1 {
          margin-top: 7%;
          max-height: 300px;
          overflow: auto;
        }

        .responsive-table1 tbody td[data-type="currency"] {
          text-align: center;
        }

        .button-21 {
          align-items: center;
          appearance: none;
          background-color: #3EB2FD;
          background-image: linear-gradient(1deg, #4F58FD, #149BF3 99%);
          background-size: calc(100% + 20px) calc(100% + 20px);
          border-radius: 100px;
          border-width: 0;
          box-shadow: none;
          box-sizing: border-box;
          color: #FFFFFF;
          cursor: pointer;
          display: inline-flex;
          font-family: CircularStd, sans-serif;
          font-size: 1rem;
          height: auto;
          justify-content: center;
          line-height: 1.5;
          padding: 6px 20px;
          position: relative;
          text-align: center;
          text-decoration: none;
          transition: background-color .2s, background-position .2s;
          user-select: none;
          -webkit-user-select: none;
          touch-action: manipulation;
          vertical-align: top;
          white-space: nowrap;
          margin-right: 1px;
        }

        .button-21:active,
        .button-21:focus {
          outline: none;
        }

        .button-21:hover {
          background-position: -20px -20px;
        }

        .button-21:focus:not(:active) {
          box-shadow: rgba(40, 170, 255, 0.25) 0 0 0 .125em;
        }
      </style>
    </head>
   
    <body>
      
      <div class="container1">
     
        <table class="responsive-table1">
          <thead>
            <tr>

              <th scope="col">Title</th>
              <th scope="col">Website</th>
              <th scope="col">Website_Username</th>
              <th scope="col">Password</th>
              <th scope="col">Strength</th>
              <th scope="col">Actions</th>
            </tr>
          </thead>

          <tbody>
            <tr>


              <td data-title="Title">c1</td>
              <td data-title="website" data-type="currency" class="tabledata">

              </td>
              <td data-title="website_username" data-type="currency" class="tabledata">

              </td>
              <td data-title="password" data-type="currency" class="tabledata">

              </td>
              <td data-title="strength" data-type="currency" class="tabledata">

              </td>
              <td>
                <button class="button-21" style=" margin-right:10px;">Show</button>
                
                <button class="button-21">Delete</button>
                
              </td>

            </tr>
          </tbody>
        </table>
      </div>
      <script>
        document.addEventListener("DOMContentLoaded", function () {
          fetch('http://127.0.0.1:8000/hashed/credentials/?session_token=' + localStorage.getItem('token'), {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
            },

          })
            .then((response) => {

              return response.json();
            })
            .then((data) => {

              const records = data.results;

              const tableBody = document.querySelector(".responsive-table1 tbody");

              tableBody.innerHTML = "";
              records.forEach((record) => {

                const newRow = document.createElement("tr");


                const titleCell = document.createElement("td");
                titleCell.textContent = record.title;

                const websiteCell = document.createElement("td");
                websiteCell.textContent = record.website;

                const websiteUsernameCell = document.createElement("td");
                websiteUsernameCell.textContent = record.website_username;

                const passwordCell = document.createElement("td");
                passwordCell.textContent = "****";

                const strengthCell = document.createElement("td");
                strengthCell.textContent = record.strength;

                const actionsCell = document.createElement("td");
                const deleteButton = document.createElement("button");
                deleteButton.textContent = "Delete";
                deleteButton.className="button-21";
                deleteButton.addEventListener("click", function () {
                  const confirmDelete = confirm("Are you sure you want to delete this record?");
                  if (confirmDelete) {
                    fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                      method: 'DELETE',
                      body: JSON.stringify({ cred_id: record.id }),
                      headers: {
                        'Content-Type': 'application/json',
                      },
                    })
                      .then((response) => {
                        
                        location.reload();
                      })

                      .catch((error) => {

                      });
                  }
                });


                const showButton = document.createElement("button");
                showButton.textContent = "Show";
                showButton.className="button-21";


                showButton.addEventListener("click", function () {
                  event.preventDefault();
                  const userPIN = prompt("Enter your PIN:");
                  if (userPIN) {
                    fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                      method: 'POST',
                      body: JSON.stringify({ pin: userPIN, session_token: localStorage.getItem('token'), cred_id: record.id }),
                      headers: {
                        'Content-Type': 'application/json',
                      },
                    })
                      .then((response) => {
                        if(response.statusCode==401){
                            alert("Invalid Pin. Please try again.");
                            return;
                          }
                        return response.json();
                      })
                      .then((data) => {
                        console.log(data);
                        passwordCell.textContent = data.password;

                        setTimeout(() => {
                          passwordCell.textContent = "****";

                        }, 10000);


                      })
                      .catch((error) => {

                      });
                  }

                });



                // const table = document.querySelector('table');
                // const rows = table.querySelectorAll('tr');

                // for (let i = 0; i < rows.length; i++) {
                //   const row = rows[i];
                //   const cells = row.querySelectorAll('td');

                //   for (let j = 0; j < 3; j++) {
                //     const cell = cells[j];



                //   }
                // }


                titleCell.addEventListener('dblclick', () => {
                  const text = titleCell.textContent;
                  titleCell.innerHTML = `<input type="text" value="${text}">`;
                  const input = titleCell.querySelector('input');
                  input.focus();


                  input.addEventListener('blur', () => {
                    const newValue = input.value;
                    
                    const userPIN = prompt("Enter your PIN to confirm change:");
                    if (userPIN) {
                      const data = {
                        title: newValue,
                        user_name: record.username,
                        website_username: record.website_username,
                        website: record.website,
                        password: record.hash_pwd,
                        modified: false,
                        session_token: localStorage.getItem('token'),
                        pin: userPIN,
                        cred_id: record.id,
                      };
                      fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                        method: 'PUT',
                        headers: {
                          'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                      })
                        .then((response) => {
                         
                          if(response.status==401){
                            titleCell.textContent = text;
                            alert("Invalid Pin. Please try again.");
                            return;
                          }
                          titleCell.textContent = newValue;
                          return response.json();
                        })

                        .catch((error) => {

                        });
                    }
                    else {

                      titleCell.textContent = text;
                    }

                  });


                  input.addEventListener('keyup', (e) => {
                    if (e.key === 'Enter') {
                      const newValue = input.value;
                     
                      const userPIN = prompt("Enter your PIN to confirm change:");
                      if (userPIN) {
                        const data = {
                          title: newValue,
                          user_name: record.username,
                          website_username: record.website_username,
                          website: record.website,
                          password: record.hash_pwd,
                          modified: false,
                          session_token: localStorage.getItem('token'),
                          pin: userPIN,
                          cred_id: record.id,
                        };
                        fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                          method: 'PUT',
                          headers: {
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(data),
                        })
                          .then((response) => {
                            if(response.status==401){
                              titleCell.textContent = text;
                            alert("Invalid Pin. Please try again.");
                            
                            return;
                          }
                          titleCell.textContent = newValue;
                            return response.json();
                          })

                          .catch((error) => {

                          });
                      }
                      else {

                        titleCell.textContent = text;
                      }
                    }
                  });
                });
                websiteCell.addEventListener('dblclick', () => {
                  const text = websiteCell.textContent;
                  websiteCell.innerHTML = `<input type="email" value="${text}">`;
                  const input = websiteCell.querySelector('input');
                  input.focus();


                  input.addEventListener('blur', () => {
                    var newValue = input.value;
                    if (!newValue.startsWith('http://') && !newValue.startsWith('https://')) {
                      newValue = 'https://' + newValue;
    }

   
    if (!newValue.includes('www.')) {
      newValue = newValue.replace('://', '://www.');
    }
                    const userPIN = prompt("Enter your PIN to confirm change:");
                    if (userPIN) {
                      const data = {
                        title: record.title,
                        user_name: record.username,
                        website_username: record.website_username,
                        website: newValue,
                        password: record.hash_pwd,
                        modified: false,
                        session_token: localStorage.getItem('token'),
                        pin: userPIN,
                        cred_id: record.id,
                      };
                      fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                        method: 'PUT',
                        headers: {
                          'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                      })
                        .then((response) => {
                          if(response.status==401){
                              websiteCell.textContent = text;
                            alert("Invalid Pin. Please try again.");
                            
                            return;
                          }
                          websiteCell.textContent = newValue;
                            return response.json();
                        })

                        .catch((error) => {

                        });
                    }
                    else {

                      websiteCell.textContent = text;
                    }

                  });


                  input.addEventListener('keyup', (e) => {
                    if (e.key === 'Enter') {
                      var newValue = input.value;
                      if (!newValue.startsWith('http://') && !newValue.startsWith('https://')) {
                      newValue = 'https://' + newValue;
    }

   
    if (!newValue.includes('www.')) {
      newValue = newValue.replace('://', '://www.');
    }
    
                      const userPIN = prompt("Enter your PIN to confirm change:");
                      if (userPIN) {
                        const data = {
                          title: record.title,
                          user_name: record.username,
                          website_username: record.website_username,
                          website: newValue,
                          password: record.hash_pwd,
                          modified: false,
                          session_token: localStorage.getItem('token'),
                          pin: userPIN,
                          cred_id: record.id,
                        };
                        fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                          method: 'PUT',
                          headers: {
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(data),
                        })
                          .then((response) => {
                            if(response.status==401){
                              websiteCell.textContent = text;
                            alert("Invalid Pin. Please try again.");
                            
                            return;
                          }
                          websiteCell.textContent = newValue;
                            return response.json();
                          })

                          .catch((error) => {

                          });
                      }
                      else {

                        websiteCell.textContent = text;
                      }
                    }
                  });
                });
                websiteUsernameCell.addEventListener('dblclick', () => {
                  const text = websiteUsernameCell.textContent;
                  websiteUsernameCell.innerHTML = `<input type="text" value="${text}">`;
                  const input = websiteUsernameCell.querySelector('input');
                  input.focus();


                  input.addEventListener('blur', () => {
                    const newValue = input.value;
                    
                    const userPIN = prompt("Enter your PIN to confirm change:");
                    if (userPIN) {
                      const data = {
                        title: record.title,
                        user_name: record.username,
                        website_username: newValue,
                        website: record.website,
                        password: record.hash_pwd,
                        modified: false,
                        session_token: localStorage.getItem('token'),
                        pin: userPIN,
                        cred_id: record.id,
                      };
                      fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                        method: 'PUT',
                        headers: {
                          'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                      })
                        .then((response) => {
                          if(response.status==401){
                              websiteUsernameCell.textContent = text;
                            alert("Invalid Pin. Please try again.");
                            
                            return;
                          }
                          websiteUsernameCell.textContent = newValue;
                            return response.json();
                        })

                        .catch((error) => {

                        });
                    }
                    else {

                      websiteUsernameCell.textContent = text;
                    }

                  });


                  input.addEventListener('keyup', (e) => {
                    if (e.key === 'Enter') {
                      const newValue = input.value;
                   
                      const userPIN = prompt("Enter your PIN to confirm change:");
                      if (userPIN) {
                        const data = {
                          title: record.title,  
                          user_name: record.username,
                          website_username: newValue,
                          website: record.website,
                          password: record.hash_pwd,
                          modified: false,
                          session_token: localStorage.getItem('token'),
                          pin: userPIN,
                          cred_id: record.id,
                        };
                        fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                          method: 'PUT',
                          headers: {
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(data),
                        })
                          .then((response) => {
                            if(response.status==401){
                              websiteUsernameCell.textContent = text;
                            alert("Invalid Pin. Please try again.");
                            
                            return;
                          }
                          websiteUsernameCell.textContent = newValue;
                            return response.json();
                          })

                          .catch((error) => {

                          });
                      }
                      else {

                        websiteUsernameCell.textContent = text;
                      }
                    }
                  });
                });

                passwordCell.addEventListener('dblclick', () => {

                  const text = passwordCell.textContent;
                  passwordCell.innerHTML = `<input type="password" value="">`;
                  const input = passwordCell.querySelector('input');
                  input.focus();


                  input.addEventListener('blur', () => {
                    const newValue = input.value;
                  
                    const userPIN = prompt("Enter your PIN to confirm change:");
                    if (userPIN) {
                      const data = {
                        title: record.title,
                        user_name: record.username,
                        website_username: record.website_username,
                        website: record.website,
                        password: newValue,
                        modified: true,
                        session_token: localStorage.getItem('token'),
                        pin: userPIN,
                        cred_id: record.id,
                      };
                      fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                        method: 'PUT',
                        headers: {
                          'Content-Type': 'application/json',
                        },
                        body: JSON.stringify(data),
                      })
                        .then((response) => {
                          
                          passwordCell.textContent = "****";
                          if(response.status==401){
                              
                            alert("Invalid Pin. Please try again.");
                            
                            return;
                          }
                         
                            return response.json();
                        }).then((data)=>{
                          strengthCell.textContent = data.strength;
                        })

                        .catch((error) => {

                        });
                    }
                    else {

                      passwordCell.textContent = text;
                    }

                  });


                  input.addEventListener('keyup', (e) => {
                    if (e.key === 'Enter') {
                      const newValue = input.value;
                  
                      const userPIN = prompt("Enter your PIN to confirm change:");
                      if (userPIN) {
                        const data = {
                          title: record.title,
                          user_name: record.username,
                          website_username: record.website_username,
                          website: record.website,
                          password: newValue,
                          modified: true,
                          session_token: localStorage.getItem('token'),
                          pin: userPIN,
                          cred_id: record.id,
                        };
                        fetch('http://127.0.0.1:8000/hashed/credentials/details/', {
                          method: 'PUT',
                          headers: {
                            'Content-Type': 'application/json',
                          },
                          body: JSON.stringify(data),
                        })
                          .then((response) => {
                           
                            passwordCell.textContent = "****";
                            if(response.statusCode==401){
                            alert("Invalid Pin. Please try again.");
                            return;
                          }

                            return response.json();
                          }).then((data)=>{
                          strengthCell.textContent = data.strength;
                        })

                          .catch((error) => {

                          });
                      }
                      else {

                        passwordCell.textContent = text;
                      }
                    }
                  });
                });

                newRow.appendChild(titleCell);
                newRow.appendChild(websiteCell);
                newRow.appendChild(websiteUsernameCell);
                newRow.appendChild(passwordCell);
                newRow.appendChild(strengthCell);
                newRow.appendChild(actionsCell);
                actionsCell.appendChild(showButton);
                actionsCell.appendChild(deleteButton);
                


                tableBody.appendChild(newRow);

              });


            })
            .catch((error) => {

            });

        })

      </script>
    </body>

    </html>
    